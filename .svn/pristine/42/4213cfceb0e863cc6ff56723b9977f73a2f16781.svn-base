package com.ekenya.echama.viewModel

import androidx.lifecycle.*
import com.ekenya.echama.model.Country
import com.ekenya.echama.model.User
import com.ekenya.echama.repository.UserAuthRepository
import com.ekenya.echama.responseCalback.LoginWrapper
import com.ekenya.echama.responseCalback.ResponseWrapper
import com.ekenya.echama.util.DataUtil
import com.oscar.retrofitcertificate.retrofitehandler.RepoImpl
import kotlinx.coroutines.*
import org.json.JSONObject
import timber.log.Timber
import kotlin.collections.ArrayList
import kotlin.collections.HashMap
import kotlin.collections.List
import kotlin.coroutines.CoroutineContext

class MainViewModel:ViewModel() {
    private val parentJob = Job()

    private val coroutineContext: CoroutineContext
        get() = parentJob + Dispatchers.Default

    private val scope = CoroutineScope(coroutineContext)

//    lateinit var  successResponseNationality : MutableLiveData<String>
//    lateinit var  nationalitiesLivedata : ResponseWrapper
//    lateinit var  myApiResponsetypes : MutableLiveData<ViewModelWrapper.error>
//    lateinit var  successResponse : MutableLiveData<ViewModelWrapper.response<String>>
//    lateinit var  regionsMediatorData : ResponseWrapper
//     var  genderLiveDate = liveData {
//         val genderList = ArrayList<String>()
//         genderList.add("--Select Gender--")
//         genderList.add("Female")
//         genderList.add("Male")
//         genderList.add("I would not wish to say")
//         emit(genderList)
//        // genderLiveDate.value=genderList
//     }
//    lateinit var  registerMemberMediatorData : ResponseWrapper
//    lateinit var  changePasswordMediatorData:ResponseWrapper
//    lateinit var  userLoginMediatorLiveData:ResponseWrapper
//    lateinit var  countrieesLiveData:ResponseWrapper
//    lateinit var  groupTypesLiveData:ResponseWrapper
//    lateinit var  validateOtpMediatorLiveData:ResponseWrapper

    var  currentUser:User = User("")
    var  userLD:LiveData<List<User>>
    val userRepository : UserAuthRepository =  UserAuthRepository(viewModelScope )
    val myApiResponseLD =  userRepository.myApiResponse
   // val myApiResponse =   RepoImpl(viewModelScope).myApiResponse

    init {
        userLD = userRepository.userLD
    }
    /**
     * method to validate user otp
     * @param json with otp details
     * @response string response wrapper
     */
    fun validateOtp(json: HashMap<String,String>){
         userRepository.verifyOtp(json)

//        when(results){
//            is ResultWrapper.NetworkError -> validateOtpMediatorLiveData.value = ViewModelWrapper.error("Kidly check you network and try again")
//            is ResultWrapper.GenericError -> validateOtpMediatorLiveData.value = ViewModelWrapper.error("Oops! error occurred")
//            is ResultWrapper.Success -> returnData(validateOtpMediatorLiveData,results.value)
//        }
//        return validateOtpMediatorLiveData

    }
    /**
     * Registers member
     * @return MediatorLiveData<ResponseWrapper>
     */
    fun registerMember(registerJson: HashMap<String,String>){
        // ViewModelWrapper.error("")
        //ViewModelWrapper.response("")
         userRepository.registerMember(registerJson)

//        when(results){
//            is ResultWrapper.NetworkError -> registerMemberMediatorData.value=ViewModelWrapper.error("Network Error occurred")
//            is ResultWrapper.GenericError -> registerMemberMediatorData.value=ViewModelWrapper.error("Generic error")
//            is ResultWrapper.Success -> returnData(registerMemberMediatorData,results.value)//registerMemberMediatorData.value=ViewModelWrapper.response(results.value.listData2().toString())
//        }
//
//        return registerMemberMediatorData
    }
    /**
     * get Nationaliries
     * @return MediatorLiveData<ResponseWrapper>
     */
     fun getCountries():LiveData<List<Country>> {
        Timber.v("getCountries()")
        if(userRepository.countriesLD.value.isNullOrEmpty()){
            userRepository.getCountries()
        }
//      userRepository.getCountries2()
        return userRepository.countriesLD
    }
    /**
     * user login
     * params usser json
     */
     fun userlogin1(hData: HashMap<String, String>){
        currentUser.pass= DataUtil.getHashedPin256(hData["password"].toString())
        userRepository.getUser(hData)
    }
//    suspend fun userlogin(json: JSONObject){
       // json.put("username","wycliffmuriithi@gmail.com")
       // json.put("password","password")
//         RepoImpl(viewModelScope).userLogin(json.getString("username"),json.getString("password"),"password")


      //  when (results){
//            is ResultWrapper.NetworkError -> userLoginMediatorLiveData.value=ViewModelWrapper.error("Error")
//            is ResultWrapper.GenericError -> userLoginMediatorLiveData.value=ViewModelWrapper.error("${results.code} Error occurred try agin later")
//            is ResultWrapper.Success -> returnLoginData(userLoginMediatorLiveData,results.value)
    //    }
      //  return results

       // return userLoginMediatorLiveData
//    }

    /**
     * Change ppassword mediator data
     * @param JsonObjject
     */
     fun changePassword(json:HashMap<String,String>){
        currentUser.pass= DataUtil.getHashedPin256(json["password"].toString())
         userRepository.updatePassword(json)

    }

    /**
     * get group type
     * params
     * @return MediatorLiveData<ResponseWrapper>
     */

    suspend fun getGroupTypes(){
        userRepository.getGroupType()

//        when(results){
//            is ResultWrapper.NetworkError -> groupTypesLiveData.value=ViewModelWrapper.error("Error occurred")
//            is ResultWrapper.GenericError -> groupTypesLiveData.value=ViewModelWrapper.error("Error occurred")
//            is ResultWrapper.Success -> returnData(groupTypesLiveData,results.value)
//        }
//        return groupTypesLiveData
    }



    suspend fun getRegionList(){
         userRepository.getConfigRegionList()
       // return results
//        when(results){
//            is ResultWrapper.NetworkError -> regionsMediatorData.value=ViewModelWrapper.error("Error")
//            is ResultWrapper.GenericError -> regionsMediatorData.value=ViewModelWrapper.error(results.toString())
//            is ResultWrapper.Success -> regionsMediatorData.value=ViewModelWrapper.response(results.value.listData2().toString())
//        }
//        return regionsMediatorData

    }

    fun getGenderList():List<String>{
        val genderList = ArrayList<String>()
        genderList.add("--Select Gender--")
        genderList.add("Female")
        genderList.add("Male")
        genderList.add("I would not wish to say")
        return genderList
    }

    fun logout() {
        currentUser = User("")
        userRepository.logOut()
    }

    fun resetPassword() {
        val registerJson = HashMap<String, String>()
        registerJson["account"] =  currentUser.phonenumber.toString()
        registerJson["identification"] = currentUser.identification.toString()

        userRepository.resetPassword(registerJson)
    }

    fun getUserDetails() {
        userRepository.getUserDetails()
    }

    fun updateUserDetails(userData:HashMap<String, String>) {
        userRepository.updateUserDetails(userData)

    }

    fun getUserTransactions(page:Int, size:Int) {
        userRepository.getUserTransactions(page,size)
    }

    fun deleteUser() {
        userRepository.deleteUser()
    }

    /**
     * function to return consumed data from json response
     * @return response wrapper class
     */
//    private fun returnData(mediatorData: ResponseWrapper, value: ResponseWrapper) {
//        Log.e("anything wrong","This is the error: " + value.toString())
//        Log.e("anything wrong 1","This is the error: " + value.status)
////        Log.e("anything wrong 2","This is the error: " + value.data.toString())
//        Log.e("anything wrong 3","This is the error: " + value.status)
//        if (value.status == "success"){
//            mediatorData.value = ViewModelWrapper.response(value.listData2().toString())
//        }
//        else if (value.status == "failed"){
//            mediatorData.value = ViewModelWrapper.error(value.getApiResponse())
//        }
//        else{
//            mediatorData.value = ViewModelWrapper.error(value.status)
//        }
//
//    }

//    private fun returnLoginData(mediatorData: ResponseWrapper, value: LoginWrapper) {
//        Log.e("anything wrong","This is the error: " + value.toString())
//        Log.e("anything wrong 1","This is the error: " + value.status)
////        Log.e("anything wrong 2","This is the error: " + value.data.toString())
//        Log.e("anything wrong 3","This is the error: " + value.status)
//
//        if (value.status == "success"){
//            mediatorData.value = ViewModelWrapper.response(value.listData2().toString())
//        }
//        else if (value.status == "failed"){
//            mediatorData.value = ViewModelWrapper.error(value.getApiResponse())
//        }
//        else{
//            mediatorData.value = ViewModelWrapper.error(value.status)
//        }
//    }


}